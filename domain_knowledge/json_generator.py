# -*- coding: utf-8 -*-
"""gpp-config-parser.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jDYjvoP4Jc5TMbcAjRj__4dodlbQmnyh

# GPP Config Parser

This is a helper tool to convert the google sheets values into a json config that can be more easily read by our java library.

"""

# optional: uncomment if running in Google Colab
# # mount google drive
# from google.colab import drive
# drive.mount('/gdrive')
# %cd /gdrive/My Drive/polimi/gpp

import openpyxl
import json

# INPUT_FILE_PATH_DOMAIN_KNOWLEDGE = 'gpp_criteria.xlsx'
INPUT_FILE_PATH_DOMAIN_KNOWLEDGE = 'domain_knowledge/sources/domain-knowledge.xlsx'

OUTPUT_FILE_PATH_GPP_CRITERIA = 'gpp_criteria.json'
OUTPUT_FILE_PATH_GPP_CRITERIA_DOCS = 'gpp_criteria_docs.json'
OUTPUT_FILE_PATH_GPP_PATCHES_DATA = 'gpp_patches_data.json'


"""### Load Excel Data

Here we load the sheets containing:

- GPP Criteria Documents
- GPP Criteria
- Patches
"""

def load_workbook(filepath):
    try:
        workbook = openpyxl.load_workbook(filepath, data_only=True)
        return workbook
    except FileNotFoundError:
        print(f"Error: The file '{filepath}' was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

workbook = load_workbook(INPUT_FILE_PATH_DOMAIN_KNOWLEDGE)
print(f"Available sheets: {workbook.sheetnames}")

"""#### GPP Criteria Documents"""

class GppCriteriaDoc():
    def __init__(self, row):
        self.name = row[0].value
        self.source = row[1].value
        self.document_reference = row[2].value
        self.publication_date = row[3].value
        self.relevant_cpv_codes = []
        if row[2].value is not None:
            if isinstance(row[4].value, str):
                if ',' in row[4].value:
                    self.relevant_cpv_codes = [code.strip() for code in row[4].value.split(',')]
                else:
                    self.relevant_cpv_codes = [row[4].value.strip()]
            elif isinstance(row[4].value, (int, float)):
                self.relevant_cpv_codes = [str(int(row[4].value))]
        self.summary = row[5].value

    def show(self):
        print('Name: ', self.name)
        print('Source: ', self.source)
        print('Document Reference: ', self.document_reference)
        print('Publication Date: ', self.publication_date)
        print('Relevant CPV Codes: ', self.relevant_cpv_codes)
        print('Summary: ', self.summary)

    def to_dict(self):
        return {
            'name': self.name,
            'source': self.source,
            'documentReference': self.document_reference,
            'publicationDate': self.publication_date.isoformat(),
            'relevantCpvCodes': self.relevant_cpv_codes, # this one could be computed from the "All Criteria" sheet
            'summary': self.summary
        }

def load_gpp_criteria_docs(sheet):
    gpp_criteria_docs = []
    first_row = True
    for row in sheet.iter_rows():
        # skip the first row
        if first_row:
            first_row = False
            continue
        # break once the name is None
        if row[0].value is None:
            break
        gpp_criteria_doc = GppCriteriaDoc(row)
        gpp_criteria_docs.append(gpp_criteria_doc)
    return gpp_criteria_docs

gpp_criteria_docs = load_gpp_criteria_docs(workbook['GPP Criteria Docs'])

# debugging
gpp_criteria_docs[0].show()
gpp_criteria_docs[0].to_dict()

"""#### GPP Criteria"""

class GppCriterion():
    def __init__(self, row):
        self.gpp_document = row[0].value.strip()
        self.gpp_source = row[1].value.strip()

        self.category = None
        if row[2].value is not None:
            self.category = row[2].value.strip()

        self.criterion_type = row[3].value.strip()
        self.ambition_level = row[4].value.strip()
        self.id = row[5].value.strip()
        self.name = row[6].value.strip()

        self.relevant_cpv_codes = []
        if row[7].value is not None:
            if isinstance(row[7].value, str):
                if ',' in row[7].value:
                    self.relevant_cpv_codes = [code.strip() for code in row[7].value.split(',')]
                else:
                    self.relevant_cpv_codes = [row[7].value.strip()]
            elif isinstance(row[7].value, (int, float)):
                self.relevant_cpv_codes = [str(int(row[7].value))]

        self.environmental_impact_type = row[8].value.strip()


        self.description = row[9].value.strip()

        # can be non-existent
        if row[10].value is not None:
            self.selection_criterion_type = row[10].value.strip()
        else:
            self.selection_criterion_type = None


    def show(self):
        print('GPP Document: ', self.gpp_document)
        print('Category: ', self.category)
        print('Criterion Type: ', self.criterion_type)
        print('Ambition Level: ', self.ambition_level)
        print('ID: ', self.id)
        print('Name: ', self.name)
        print('Relevant CPV Codes: ', self.relevant_cpv_codes)
        print('Environmental Impact Type: ', self.environmental_impact_type)
        print('Description: ', self.description)
        if self.selection_criterion_type is not None:
            print('Selection Criterion Type: ', self.selection_criterion_type)

    def to_dict(self):
        return {
            'gppDocument': self.gpp_document,
            'gppSource': self.gpp_source,
            'category': self.category,
            'criterionType': self.criterion_type,
            'ambitionLevel': self.ambition_level,
            'id': self.id,
            'name': self.name,
            'relevantCpvCodes': self.relevant_cpv_codes,
            'environmentalImpactType': self.environmental_impact_type,
            'description': self.description,
            'selectionCriterionType': self.selection_criterion_type,
        }

def load_gpp_criteria(sheet):
    gpp_criteria = []
    first_row = True
    for row in sheet.iter_rows():
        # skip the first row
        if first_row:
            first_row = False
            continue
        # break once the name is None
        if row[0].value is None:
            break
        gpp_criterion = GppCriterionNew(row)
        gpp_criteria.append(gpp_criterion)
    return gpp_criteria

gpp_criteria = load_gpp_criteria(workbook['All Criteria'])

# debugging
gpp_criteria[14].show()
gpp_criteria[14].to_dict()

"""#### Patches Data"""

class GppPatchData():
    def __init__(self, row):
        self.name = row[0].value.strip()
        self.bt_ids = []
        if row[1].value is not None and row[1].value.strip() != '-':
            if ',' in row[1].value:
                self.bt_ids = [id.strip() for id in row[1].value.split(',')]
            else:
                self.bt_ids = [row[1].value.strip()]

        self.depends_on = None
        if row[2].value is not None and row[2].value.strip() != '-':
            self.depends_on = row[2].value.strip()

        self.path_in_lot = ''
        if row[3].value is not None and row[3].value.strip() != '-':
            self.path_in_lot = row[3].value.strip()

        self.value = None
        if row[4].value is not None and row[4].value.strip() != '-':
            self.value = row[4].value.strip()

    def show(self):
        print('Name: ', self.name)
        print('BT IDs: ', self.bt_ids)
        print('Depends on: ', self.depends_on)
        print('Path in Lot: ', self.path_in_lot)
        print('Value: ', self.value)

    def to_dict(self):
        return {
            'name': self.name,
            'btIds': self.bt_ids,
            'dependsOn': self.depends_on,
            'pathInLot': self.path_in_lot,
            'value': self.value
        }


def load_gpp_patches_data(sheet):
    gpp_patches_data = []
    first_row = True
    for row in sheet.iter_rows():
        # skip the first row
        if first_row:
            first_row = False
            continue
        # break once the first value is None
        if row[0].value is None:
            break
        gpp_patch_data = GppPatchData(row)
        gpp_patches_data.append(gpp_patch_data)
    return gpp_patches_data

gpp_patches_data = load_gpp_patches_data(workbook['Patches'])

# debugging
gpp_patches_data[0].show()

"""### Create JSON files

From the data that we loaded from the sheets:

- GPP Criteria Documents (`gpp_criteria_docs`)
- GPP Criteria (only for Furniture at the moment) (`gpp_criteria`)
- Patches (`gpp_patches_data`)

We'll now create JSON files that can be easily processed by our application.
"""

gpp_criteria_docs_json = [doc.to_dict() for doc in gpp_criteria_docs]
with open(OUTPUT_FILE_PATH_GPP_CRITERIA_DOCS, 'w') as f:
    json.dump(gpp_criteria_docs_json, f, indent=2)
print("Created gpp_criteria_docs.json")

gpp_criteria_json = [criterion.to_dict() for criterion in gpp_criteria]
with open(OUTPUT_FILE_PATH_GPP_CRITERIA, 'w') as f:
    json.dump(gpp_criteria_json, f, indent=2)
print("Created gpp_criteria.json")

gpp_patches_data_json = [patch.to_dict() for patch in gpp_patches_data]
with open(OUTPUT_FILE_PATH_GPP_PATCHES_DATA, 'w') as f:
    json.dump(gpp_patches_data_json, f, indent=2)
print("Created gpp_patches_data.json")

